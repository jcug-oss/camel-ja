# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-05-18 09:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: preview
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:1
#, no-wrap
msgid "Build your own custom Web API Component from scratch."
msgstr ""

#. type: YAML Front Matter: title
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:1
#, no-wrap
msgid "Custom Web API Component"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:11
#, no-wrap
msgid "Have you built a new great Web API for your product? Wouldn't be wonderful to have it available as a part of the great [Apache Camel component family](/components/latest/)? We would love it.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:13
#, no-wrap
msgid "The community just released [Camel 3](/blog/2019/12/Camel3-Whatsnew/) which is more modular, lightweight and already includes lots of components (300+) to quickly integrate various systems consuming or producing data. All of these components can be used with the same integration domain specific language (DSL) based on the famous [Enterprise Integration Patterns](https://www.enterpriseintegrationpatterns.com) (EIPs).\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:15
#, no-wrap
msgid "Creating a new component is actually pretty simple and, as a benefit, you will also have the possibility to use Camel sub-projects to make your Web API available within different runtimes: [SpringBoot](https://github.com/apache/camel-spring-boot) (auto-config), [Quarkus](https://github.com/apache/camel-quarkus) (Java native compilation) and [Camel-K](https://github.com/apache/camel-k) (serverless work).\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:17
#, no-wrap
msgid "This minimal, yet complete, example will focus on all the steps required to create and contribute your own Web API component to the Apache Camel codebase.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:20
#, no-wrap
msgid ""
"As prerequisites you just need OpenJDK 1.8 and Maven 3.5+.\n"
"[Download the complete source code](camel-chuck.zip).\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:21
#, no-wrap
msgid "API endpoint"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:24
#, no-wrap
msgid "To keep the example short and simple, we have chosen the [free JSON API for hand curated Chuck Norris facts](https://api.chucknorris.io). This is perfect to showcase how to create our new component, without having to deal with all the details and complexity of a full blown API.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:26
#, no-wrap
msgid "There are a few endpoints available, but we will use the following to retrieve a random joke in JSON format:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:27
#, no-wrap
msgid ""
"$ curl https://api.chucknorris.io/jokes/random | jq\n"
"{\n"
"  \"categories\": [],\n"
"  \"created_at\": \"2016-05-01 10:51:41.584544\",\n"
"  \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\",\n"
"  \"id\": \"TMGDYHjLSu-G5Jkueph9lA\",\n"
"  \"updated_at\": \"2016-05-01 10:51:41.584544\",\n"
"  \"url\": \"https://api.chucknorris.io/jokes/TMGDYHjLSu-G5Jkueph9lA\",\n"
"  \"value\": \"Who wins in a race car race? chuck Norris always wins. No excuses.\"\n"
"}\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:40
#, no-wrap
msgid "Checkout and initial setup"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:43
#, no-wrap
msgid "The first step is to fork the official [Camel project on Github](https://github.com/apache/camel) and then clone it on your local machine with the following shell command (replace `$USERNAME` with yours):\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:44
#, no-wrap
msgid ""
"$ git clone git@github.com:$USERNAME/camel.git\n"
"$ cd camel/components\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:50
#, no-wrap
msgid "At this point we could use the `camel-archetype-component` to generate the project skeleton, but I usually prefer to do it from scratch:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:51
#, no-wrap
msgid ""
"$ mkdir -p camel-chuck/src/main/java/org/apache/camel/component/chuck \\\n"
"    && mkdir -p camel-chuck/src/main/docs/chuck-component.adoc \\\n"
"    && mkdir -p camel-chuck/src/test/java/org/apache/camel/component/chuck \\\n"
"    && mkdir -p camel-chuck/src/test/resources \\\n"
"    && cd camel-chuck\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:60
#, no-wrap
msgid "Now we need to create the project object module (POM) for Maven build (use the same parent version that you find in `camel/pom.xml`):\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:61
#, no-wrap
msgid ""
"$ cat <<EOF > pom.xml\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n"
"<modelVersion>4.0.0</modelVersion>\n"
"\n"
"    <parent>\n"
"        <groupId>org.apache.camel</groupId>\n"
"        <artifactId>components</artifactId>\n"
"        <version>3.1.0-SNAPSHOT</version>\n"
"    </parent>\n"
"\n"
"    <artifactId>camel-chuck</artifactId>\n"
"    <packaging>jar</packaging>\n"
"    <name>Camel :: Chuck</name>\n"
"    <description>Camel Chuck Norris API</description>\n"
"\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.apache.camel</groupId>\n"
"            <artifactId>camel-support</artifactId>\n"
"        </dependency>\n"
"        <!-- test dependencies -->\n"
"        <dependency>\n"
"            <groupId>org.apache.camel</groupId>\n"
"            <artifactId>camel-test-junit5</artifactId>\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>org.apache.logging.log4j</groupId>\n"
"            <artifactId>log4j-core</artifactId>\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>org.apache.logging.log4j</groupId>\n"
"            <artifactId>log4j-slf4j-impl</artifactId>\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:105
#, no-wrap
msgid "Let's also add the log4j2 configuration that will be useful while testing:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:106
#, no-wrap
msgid ""
"$ cat <<EOF > src/test/resources/log4j2.properties\n"
"appender.out.type = Console\n"
"appender.out.name = out\n"
"appender.out.layout.type = PatternLayout\n"
"appender.out.layout.pattern = %d [%15.15t] %highlight{%-5p} %-30.30c - %m%n\n"
"rootLogger.level = INFO\n"
"rootLogger.appenderRef.out.ref = out\n"
"\n"
"loggers = mine\n"
"logger.mine.name = org.apache.camel.component.chuck\n"
"logger.mine.level = INFO\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:122
#, no-wrap
msgid "That's all for the initial setup, your project folder should look like this:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:123
#, no-wrap
msgid ""
"$ tree\n"
".\n"
"├── pom.xml\n"
"├── src\n"
"│   ├── main\n"
"│   │   ├── docs\n"
"│   │   │   └── chuck-component.adoc\n"
"│   │   └── java\n"
"│   │       └── org\n"
"│   │           └── apache\n"
"│   │               └── camel\n"
"│   │                   └── component\n"
"│   │                       └── chuck\n"
"│   └── test\n"
"│       ├── java\n"
"│       │   └── org\n"
"│       │       └── apache\n"
"│       │           └── camel\n"
"│       │               └── component\n"
"│       │                   └── chuck\n"
"│       └── resources\n"
"│           └── log4j2.properties\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:148
#, no-wrap
msgid "Component creation"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:151
#, no-wrap
msgid "After the initial project setup, we are ready to add the component main building blocks.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:153
#, no-wrap
msgid "When the Camel Context starts, it creates the Component object, that creates the Endpoint object, that in turns creates the Producer and the Consumer objects as needed. The Camel API includes convenient default implementation for all of them, that are also easy to extend.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:155
#, no-wrap
msgid "Our component class extends the DefaultComponent class and we also add a configuration class to hold component's query parameters that will allow some level of customization.\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:156
#, no-wrap
msgid ""
"@Component(\"chuck\")\n"
"public class ChuckComponent extends DefaultComponent {\n"
"    @Override\n"
"    protected Endpoint createEndpoint(final String uri, String remaining, final Map<String, Object> parameters) throws Exception {\n"
"        final ChuckConfiguration configuration = new ChuckConfiguration();\n"
"        //…\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:168
#, no-wrap
msgid "Then, we need to extend the DefaultEndpoint and the DefaultAsyncProducer to be able to support asynchronous HTTP requests. For the vast majority of web APIs we don't need to create a Consumer, unless you have a polling endpoint. In that case, you would need to extend ScheduledPollEndpoint and ScheduledPollConsumer.\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:169
#, no-wrap
msgid ""
"@UriEndpoint(firstVersion = \"3.0.0\", scheme = \"chuck\", title = \"Chuck\", syntax = \"chuck:type\", label = \"chuck\", producerOnly = true)\n"
"public class ChuckEndpoint extends DefaultEndpoint {\n"
"    @UriParam\n"
"    private ChuckConfiguration configuration;\n"
"    //…\n"
"    @Override\n"
"    protected void doStart() throws Exception {\n"
"        //…\n"
"    }\n"
"    @Override\n"
"    protected void doStop() throws Exception {\n"
"        //…\n"
"    }\n"
"    @Override\n"
"    public Producer createProducer() throws Exception {\n"
"        return new ChuckProducer(this);\n"
"    }\n"
"    @Override\n"
"    public Consumer createConsumer(Processor processor) throws Exception {\n"
"        throw new UnsupportedOperationException(\"No support for consumers\");\n"
"    }\n"
"}\n"
"\n"
"public class ChuckProducer extends DefaultAsyncProducer {\n"
"    @Override\n"
"    public boolean process(Exchange exchange, AsyncCallback callback) {\n"
"        //…\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:203
#, no-wrap
msgid "In the process method of the Producer we return false to signal that the processing will be executed asynchronously. Look at the repository for the full source code, but these are the only classes needed to start building a new component.\n"
msgstr ""

#. type: Title ###
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:204
#, no-wrap
msgid "API service"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:207
#, no-wrap
msgid "To implement the call logic we need to add some more dependencies, mainly to deal with the HTTP request and JSON parsing.\n"
msgstr ""

#. type: Fenced code block (xml)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:208
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>org.asynchttpclient</groupId>\n"
"            <artifactId>async-http-client</artifactId>\n"
"            <version>${ahc-version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>com.fasterxml.jackson.core</groupId>\n"
"            <artifactId>jackson-databind</artifactId>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>com.fasterxml.jackson.core</groupId>\n"
"            <artifactId>jackson-annotations</artifactId>\n"
"            <version>${jackson2-version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>com.fasterxml.jackson.datatype</groupId>\n"
"            <artifactId>jackson-datatype-jsr310</artifactId>\n"
"            <version>${jackson2-version}</version>\n"
"        </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:231
#, no-wrap
msgid "The [AsyncHttpClient](https://github.com/AsyncHttpClient/async-http-client) (AHC) library is built on top of Netty and allows Java applications to easily execute asynchronous HTTP requests and it fits nicely with the Camel asynchronous routing engine. [JacksonDataBind](https://github.com/FasterXML/jackson-databind) is used to convert JSON data to and from plain old Java object (POJO) using annotations.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:233
#, no-wrap
msgid "The model for our API is really basic and consists of one annotated class:\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:234
#, no-wrap
msgid ""
"@JsonIgnoreProperties(ignoreUnknown = true)\n"
"public class RandomJoke {\n"
"    @JsonProperty(\"id\")\n"
"    private String id;\n"
"    @JsonProperty(\"url\")\n"
"    private String url;\n"
"    @JsonProperty(\"value\")\n"
"    private String value;\n"
"    …\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:248
#, no-wrap
msgid "The service interface represents our API adapter and contains a method to call the random jokes endpoint which takes a callback object. This is the method called by our AsyncProducer class as defined by the message pipeline (see the test example in the next section).\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:249
#, no-wrap
msgid ""
"public interface ApiService {\n"
"    void randomJoke(Exchange exchange, AsyncCallback callback);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:256
#, no-wrap
msgid "You can check the implementation of this interface which uses the AsyncHttpClient to actually do the HTTP request. The most interesting part is the ChuckAsyncHandler inner class, that gets the response and handles the Camel Exchange object (message container).\n"
msgstr ""

#. type: Title ###
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:257
#, no-wrap
msgid "Unit and integration tests"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:260
#, no-wrap
msgid "A component would not be complete without a good set of unit and integration tests. This is also an easy task to do thanks to the CamelTestSupport which has some nice abstractions that allows you to create and test your routes.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:262
#, no-wrap
msgid "In this case we add the [Wiremock](https://github.com/tomakehurst/wiremock) dependency, which is a tool for HTTP response stubbing:\n"
msgstr ""

#. type: Fenced code block (xml)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:263
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>com.github.tomakehurst</groupId>\n"
"            <artifactId>wiremock</artifactId>\n"
"            <version>${wiremock-version}</version>\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:273
#, no-wrap
msgid "In the integration test we simply create a RouteBuilder and call our Web API by using Message Endpoint EIP (`to`) and our component's URI (`chuck:jokes`), also logging the response. We are implicitly using the default base API URL that you can find in the ChuckConfiguration class, among the other parameters.\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:274
#, no-wrap
msgid ""
"public class ChuckComponentTest extends CamelTestSupport {\n"
"    @Test\n"
"    public void testRandomJoke() throws Exception {\n"
"        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n"
"        mock.expectedMinimumMessageCount(1);\n"
"        mock.expectedBodyReceived().body(RandomJoke.class);\n"
"        template.sendBody(\"direct:test\", \"\");\n"
"        assertMockEndpointsSatisfied();\n"
"    }\n"
"\n"
"    @Override\n"
"    protected RouteBuilder createRouteBuilder() throws Exception {\n"
"        return new RouteBuilder() {\n"
"            public void configure() {\n"
"                from(\"direct:test\")\n"
"                  .to(\"chuck:jokes\")\n"
"                  .log(\"${body}\")\n"
"                  .to(\"mock:result\");\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:300
#, no-wrap
msgid "The unit test is the same, but this time we need to abstract away the real API by using a Fake web server running on localhost that will return a fixed response contained in `src/main/resource/__files/json/random-joke.json`. Note how we use the Camel's `AvailablePortFinder` utility to get the mock's port.\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:301
#, no-wrap
msgid ""
"    private static WireMockServer wireMockServer;\n"
" \n"
"    @BeforeAll\n"
"    public static void startServer() {\n"
"        port = AvailablePortFinder.getNextAvailable();\n"
"        wireMockServer = new WireMockServer(port);\n"
"        wireMockServer.start();\n"
"        setupStubs();\n"
"    }\n"
"\n"
"    public static void setupStubs() {\n"
"        wireMockServer.stubFor(get(urlEqualTo(\"/jokes/random\"))\n"
"            .willReturn(aResponse()\n"
"                .withHeader(\"Content-Type\", \"application/json; charset=UTF-8\")\n"
"                .withStatus(HttpURLConnection.HTTP_OK)\n"
"                .withBodyFile(\"json/random-joke.json\")));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:322
#, no-wrap
msgid "As an additional step we also need to customize the component's base URL to make it use our fake server on localhost:\n"
msgstr ""

#. type: Fenced code block (java)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:323
#, no-wrap
msgid ""
"    @Override\n"
"    protected CamelContext createCamelContext() throws Exception {\n"
"        final CamelContext context = super.createCamelContext();\n"
"        context.disableJMX();\n"
"        final ChuckComponent component = new ChuckComponent();\n"
"        component.setBaseUrl(\"http://localhost:\" + port);\n"
"        context.addComponent(\"chuck\", component);\n"
"        return context;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:336
#, no-wrap
msgid "To run unit tests and code style check use the following command (check the required `maven-surefire-plugin` configuration in `pom.xml`):\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:337
#, no-wrap
msgid "$ mvn clean install -Psourcecheck\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:342
#, no-wrap
msgid "We run the slow integration tests using a different profile, that is not executed as part of the default build lifecycle:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:343
#, no-wrap
msgid "$ mvn clean test -Pint\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:347
#, no-wrap
msgid "Final integration and PR"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:350
#, no-wrap
msgid "The component is almost ready to be integrated in the current Camel codebase. To automatically generate the component documentation you just need to add the following placeholders and Camel plugins will take care of it.\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:351
#, no-wrap
msgid ""
"$ cat <<EOF > src/docs/chuck-component.adoc\n"
"\n"
"// component options: START\n"
"// component options: END\n"
"\n"
"// endpoint options: START\n"
"// endpoint options: END\n"
"\n"
"EOF\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:364
#, no-wrap
msgid "Then, put the new component into the list of all Camel components by manually adding the module in `components/pom.xml`. Before doing a full build, it is also good to rebase the project to get the latest changes:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:365
#, no-wrap
msgid ""
"$ git remote add upstream git@github.com:apache/camel.git\n"
"$ git pull --rebase upstream master\n"
"\n"
"$ cd ../..\n"
"$ mvn clean install -Pfastinstall\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:374
#, no-wrap
msgid "Finally, if the build is successful, you can create a new branch to host your changes, commit to your local repository and push the branch:\n"
msgstr ""

#. type: Fenced code block (sh)
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:375
#, no-wrap
msgid ""
"$ git checkout -b camel-chuck\n"
"$ git add .\n"
"$ git commit -m \"camel-chuck component\"\n"
"$ git push\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:383
#, no-wrap
msgid "The last step is to open a Pull Request (PR) directly from GitHub pages and wait for the community review and feedback. If you need any help before the PR, simply send an email to the developers mailing list and we will do our best to help.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2020/01/CustomWebApiComponent/index.md:384
#, no-wrap
msgid "Happy coding :)\n"
msgstr ""
