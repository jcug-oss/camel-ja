# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-20 15:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: preview
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:1
#, fuzzy, no-wrap
msgid "Learn how to include properties and resources in your Camel K integration"
msgstr "Camel Kの統合にプロパティやリソースを含める方法をご紹介します。"

#. type: YAML Front Matter: title
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:1
#, fuzzy, no-wrap
msgid "Camel K 1.5 - New configuration settings"
msgstr "Camel K 1.5 - 新しいコンフィギュレーション設定"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:11
#, fuzzy, no-wrap
msgid "Camel K version 1.5 is out. And with it, a new way of providing configuration and resources to your `Integration`. We have worked on a deep code refactoring in order to harmonize the existing configuration settings and add new ones to exploit the power of `camel-quarkus` runtime, which has become the main way to materialize an `Integration`.\n"
msgstr "Camel K バージョン1.5がリリースされました。それに伴い、あなたの`統合`に設定やリソースを提供する新しい方法が生まれました。私たちは、既存の設定を調和させ、新しい設定を追加するために、深いコードリファクタリングに取り組みました。このリファクタリングは、`Integration`を具現化するための主要な方法となっている`camel-quarkus`ランタイムのパワーを活用するものです。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:13
#, fuzzy, no-wrap
msgid "We added new features that will simplify your developer life. We also added new checks that will give you useful tips when using a feature in a wrong way.\n"
msgstr "私たちは、開発者の生活を簡素化する新機能を追加しました。また、間違った方法で機能を使用している場合に、有用なヒントを与える新しいチェック機能も追加しました。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:15
#, fuzzy, no-wrap
msgid "Through this blog you will learn about:\n"
msgstr "このブログを通して、あなたは以下のことを学びます。\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "New build-time properties feature\n"
msgstr "新しいビルドタイムプロパティ機能\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "Leverage Kubernetes resources (ie, `Configmap`, `Secret`) for config and resources\n"
msgstr "設定やリソースにKubernetesのリソース（例：`Configmap`、`Secret`）を活用。\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "Kubernetes resources key filtering\n"
msgstr "Kubernetesリソースのキーフィルタリング\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "Support for plain and binary files\n"
msgstr "プレーンファイルとバイナリファイルに対応\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "Specify file destination path\n"
msgstr "ファイルの保存先パスの指定\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, fuzzy, no-wrap
msgid "New warnings and limitations\n"
msgstr "新しい警告と制限\n"

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:23
#, fuzzy, no-wrap
msgid "Runtime properties"
msgstr "ランタイムプロパティ"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:27
#, fuzzy, no-wrap
msgid ""
"If you're an experienced Camel K developer, you are certainly familiar with the `--property` (abbreviated `--p`) and `--property-file` flags of the `kamel run` command. Through these flags you are instructing the runtime `Integration` to include properties configuration that will be used during the application execution. Within version 1.5 we made a slight change on how to provide a property file. We have deprecated the `--property-file` flag and favoured the new syntax `--property file:my-file.properties` (or shorter, `--p file:my-file.properties`).\n"
"Since this version we're also starting to distinguish between **runtime** properties and **build-time** properties. `--property` will be used to identify runtime properties.\n"
msgstr ""
"経験豊富な Camel K の開発者であれば、`kamel run` コマンドの `--property` (略して `--p`) および `--property-file` フラグに精通していることでしょう。これらのフラグによって、アプリケーションの実行中に使用されるプロパティの設定を含むように、ランタイム `Integration` に指示します。バージョン1.5では、プロパティファイルを提供する方法を少し変更しました。このバージョンでは、`--property-file` フラグを廃止し、新しい構文である `--property file:my-file.properties` (または、より短い `--p file:my-file.properties`) を採用しました。\n"
"また、このバージョンから、**ランタイム**プロパティと**ビルドタイム**プロパティを区別するようになりました。ランタイムプロパティの識別には、`--property`が使用されます。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:29
#, fuzzy, no-wrap
msgid "Learn more in the [runtime properties documentation page](/camel-k/latest/configuration/runtime-properties.html).\n"
msgstr "詳しくは、[ランタイムプロパティのドキュメントページ](/camel-k/latest/configuration/runtime-properties.html)をご覧ください。\n"

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:30
#, fuzzy, no-wrap
msgid "Build-time properties"
msgstr "ビルドタイム特性"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:33
#, fuzzy, no-wrap
msgid "You may have noticed that we highlighted the term **runtime** in the previous section. Since version 1.5 we're introducing a new kind of properties in order to distinguish two phases of the `Integration` lifecycle. As Camel Quarkus is gaining importance, we needed to conceive the concept of **build-time** properties, which are consumed by the Camel Quarkus build process. Within the presence of the `--build-property` flag, we can instruct our integrations to include certain build time configuration that may be required by the Camel Quarkus build process.\n"
msgstr "前のセクションで、「ランタイム」という言葉を強調したことにお気づきでしょうか。バージョン1.5からは、「統合」のライフサイクルの2つのフェーズを区別するために、新しい種類のプロパティを導入しています。Camel Quarkusが重要になってきたため、Camel Quarkusのビルドプロセスで消費される**build-time**プロパティの概念を考える必要がありました。これは、Camel Quarkusのビルドプロセスで使用されます。`--build-property`フラグを使用することで、Camel Quarkusのビルドプロセスで必要となる可能性のある特定のビルド時の設定を含めるように統合を指示することができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:35
#, fuzzy, no-wrap
msgid "If you have a look at [build time configuration variables expected by a Quarkus application](https://quarkus.io/guides/config#build-time-configuration), you will be able to spot certain properties that will influence the final build.\n"
msgstr "Quarkusアプリケーションで想定されるビルド時の設定変数](https://quarkus.io/guides/config#build-time-configuration)を見ると、最終的なビルドに影響を与える特定のプロパティを見つけることができるでしょう。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:37
#, fuzzy, no-wrap
msgid "A very interesting use case that will benefit from this new flag is the [configuration of a Datasource in Camel K](https://github.com/apache/camel-k/blob/main/examples/databases/PostgresDBAutoDatasource.java).\n"
msgstr "この新しいフラグの恩恵を受けられる非常に興味深いユースケースは、[Camel KでのDatasourceの設定](https://github.com/apache/camel-k/blob/main/examples/databases/PostgresDBAutoDatasource.java)です。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:39
#, fuzzy, no-wrap
msgid "If you look at the example, you can see that you can quickly setup a **JDBC Datasource** by configuration, just providing certain build and runtime properties to your `Integration`:\n"
msgstr "この例を見ると、特定のビルドプロパティとランタイムプロパティを `Integration` に与えるだけで、構成によって **JDBC Datasource** を素早くセットアップできることがわかります。\n"

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:39
#, fuzzy, no-wrap
msgid ""
"kamel run PostgresDBAutoDatasource.java --dev \\\n"
"                                        --build-property quarkus.datasource.camel.db-kind=postgresql \\\n"
"                                        -p quarkus.datasource.camel.jdbc.url=jdbc:postgresql://postgres:5432/test \\\n"
"                                        -p quarkus.datasource.camel.username=postgresadmin \\\n"
"                                        -p quarkus.datasource.camel.password=admin123 \\\n"
"                                        -d mvn:io.quarkus:quarkus-jdbc-postgresql:1.13.7.Final\n"
msgstr ""
"kamel run PostgresDBAutoDatasource.java --dev \n"
"                                        --build-property quarkus.datasource.camel.db-kind=postgresql \n"
"                                        -p quarkus.datasource.camel.jdbc.url=jdbc:postgresql://postgres:5432/test \n"
"                                        -p quarkus.datasource.camel.username=postgresadmin \n"
"                                        p quarkus.datasource.camel.password=admin123 -p quarkus.datasource.camel.username=postgresadmin \n"
"                                        -d mvn:io.quarkus:quarkus-jdbc-postgresql:1.13.7.Final\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:48
#, fuzzy, no-wrap
msgid "You can learn more about this feature in the [build time properties documentation page](/camel-k/latest/configuration/build-time-properties.html).\n"
msgstr "この機能については、[ビルドタイムプロパティのドキュメントページ](/camel-k/latest/configuration/build-time-properties.html)で詳しく説明されています。\n"

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:49
#, fuzzy, no-wrap
msgid "Integration configuration"
msgstr "インテグレーション構成"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:52
#, fuzzy, no-wrap
msgid "Until version 1.5, you had several way to provide a configuration file to an `Integration`. You could use the `--resource` to upload a file, `--configmap` to use a `Configmap` or `--secret` to use a `Secret`. We decided to review entirely this part and deprecate `--configmap` and `--secret` and deeply review `--resource` behavior.\n"
msgstr "バージョン1.5までは、`Integration`に設定ファイルを提供する方法がいくつかありました。ファイルをアップロードするには `--resource` を、`Configmap` を使用するには `--configmap` を、`Secret` を使用するには `--secret` を使用することができました。私たちはこの部分を全面的に見直し、`--configmap`と`--secret`を非推奨とし、`--resource`の動作を深く見直すことにしました。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:54
#, fuzzy, no-wrap
msgid "We realized that we need to distinguish between two different types of files that can be used by the `Integration`. One is tipically a text configuration file that should be parsed during the startup of the application to spot possible configuration properties. These files should be also made available in the classpath. We are providing these kind of files via `--config` flag.\n"
msgstr "統合」で使用できる2つの異なるタイプのファイルを区別する必要があることに気づきました。1つは典型的なテキスト構成ファイルで、アプリケーションの起動時に解析して、可能な構成プロパティを見つける必要があります。これらのファイルはクラスパスで利用できるようにする必要があります。私たちはこれらのファイルを `--config` フラグで提供しています。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:56
#, fuzzy, no-wrap
msgid "According to the `kamel run --help`, the `--config`:\n"
msgstr "kamel run --help`によると、`--config`になっています。\n"

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:56
#, fuzzy, no-wrap
msgid "      --config stringArray             Add a runtime configuration from a Configmap, a Secret or a file (syntax: [configmap|secret|file]:name[/key], where  name represents the local file path or the configmap/secret name and key optionally represents the configmap/secret key to be filtered)\n"
msgstr ""
"      --config stringArray コンフィグマップ、シークレット、ファイルからランタイムコンフィグを追加します。[nameはローカルファイルのパスまたはコンフィグマップ/シークレットの名前を表し、keyはオプションでフィルタリングされるコンフィグマップ/シークレットのキーを表します。\n"
"\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:60
#, fuzzy, no-wrap
msgid "You will be able to provide a `Configmap`, a `Secret` or a local file. The new syntax is expecting you to declare the kind of resource ( _configmap_, _secret_ or _file_) and the name or local path where it is located. You may also specify the `Configmap`/`Secret` key, helping therefore to limit the exposure of information that will be needed in your integration.\n"
msgstr "コンフィグマップ」、「シークレット」、「ローカルファイル」のいずれかを提供することができます。新しい構文では、リソースの種類(_configmap_, _secret_, _file_)と、そのリソースが置かれている名前またはローカルパスを宣言することになっています。また、`Configmap`/`Secret`のキーを指定することもでき、統合に必要な情報の公開を制限することができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:62
#, fuzzy, no-wrap
msgid "The whole documentation is available on the [runtime configuration page](/camel-k/latest/configuration/runtime-config.html). You can also refer the different examples provided in [Camel K example repository](https://github.com/apache/camel-k/tree/main/examples/user-config).\n"
msgstr "ドキュメント全体は[runtime configuration page](https://camel.apache.org/camel-k/latest/configuration/runtime-config.html)にあります。また、[Camel K example repository](https://github.com/apache/camel-k/tree/main/examples/user-config)で提供されている様々なサンプルを参照することもできます。\n"

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:63
#, fuzzy, no-wrap
msgid "Integration resources"
msgstr "統合リソース"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:66
#, fuzzy, no-wrap
msgid "The use case for `--resource` is generally to provide any kind of file available to your integration runtime. Opposed to `--config`, the resource will let you upload a binary or text resource (file, `Configmap` or `Secret`) that won't be parsed by the application looking for properties. The materialized file won't be even added to the classpath (you can do that via `jvm` trait, though).\n"
msgstr "--resource`のユースケースは、一般的に、統合ランタイムが利用できるあらゆる種類のファイルを提供することです。--config`とは対照的に、リソースではバイナリやテキストのリソース(ファイル、`Configmap`や`Secret`)をアップロードすることができますが、アプリケーションがプロパティを探すために解析することはありません。具体化されたファイルはクラスパスに追加されることもありません(ただし、`jvm` trait を介して追加することは可能です)。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:68
#, fuzzy, no-wrap
msgid "Let's look at what the `kamel run --help` tells us about `--resource`:\n"
msgstr "kamel run --help`で、`--resource`についてどのようなことがわかるか見てみましょう。\n"

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:68
#, fuzzy, no-wrap
msgid "      --resource stringArray           Add a runtime resource from a Configmap, a Secret or a file (syntax: [configmap|secret|file]:name[/key][@path], where name represents the local file path or the configmap/secret name, key optionally represents the configmap/secret key to be filtered and path represents the destination path)\n"
msgstr "      --resource stringArray コンフィグマップ、シークレット、ファイルからランタイムリソースを追加します。[nameはローカルファイルのパスまたはコンフィグマップ/シークレットの名前を表し、keyはオプションでフィルタリングされるコンフィグマップ/シークレットのキーを表し、pathは送信先のパスを表します。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:72
#, fuzzy, no-wrap
msgid "The syntax is similar on what we had for `--config`. There is a slight powerful addition though. Within a resource we can specify the destination path (_@path_) where we expect the file to be materialized. With this new feature, you will be able to include any file to any destination needed directly through the CLI. As an example, you can check now how easy is to [setup an SSL certificate to your HTTP connection](https://github.com/apache/camel-k/blob/main/examples/http/PlatformHttpsServer.java).\n"
msgstr "構文は、`--config`で使っていたものと似ています。しかし、ちょっとした強力な追加機能があります。リソースの中では、ファイルが実体化されることを期待して、デスティネーションパス(_@path_)を指定することができます。この新機能を使えば、CLIを使って、必要なファイルを必要な場所に直接インクルードすることができるようになります。例として、[HTTP接続にSSL証明書をセットアップする](https://github.com/apache/camel-k/blob/main/examples/http/PlatformHttpsServer.java)の簡単さを確認することができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:74
#, fuzzy, no-wrap
msgid "Once you have stored your certificate in a `Secret`, for instance running:\n"
msgstr "証明書を `Secret` に格納したら、例えば実行してみましょう。\n"

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:74
#, fuzzy, no-wrap
msgid "kubectl create secret generic my-self-signed-ssl --from-file=server.key --from-file=server.crt\n"
msgstr "kubectl create secret generic my-self-signed-ssl --from-file=server.key --from-file=server.crt\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:79
#, fuzzy, no-wrap
msgid "Then, the rest will be to let your integration know where to materialize those files. Using the `PlatformHttp` in Camel K, the result will be executing the following command:\n"
msgstr "あとは、これらのファイルをどこに格納するかを統合機能に知らせることになります。Camel Kの`PlatformHttp`を使うと、次のようなコマンドを実行することになります。\n"

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:79
#, fuzzy, no-wrap
msgid ""
"kamel run PlatformHttpsServer.java -p quarkus.http.ssl.certificate.file=/etc/ssl/my-self-signed-ssl/server.crt \\\n"
"                                   -p quarkus.http.ssl.certificate.key-file=/etc/ssl/my-self-signed-ssl/server.key \\\n"
"                                   --resource secret:my-self-signed-ssl@/etc/ssl/my-self-signed-ssl \\\n"
"                                   -t container.port=8443 --dev\n"
msgstr ""
"kamel run PlatformHttpsServer.java -p quarkus.http.ssl.certificate.file=/etc/ssl/my-self-signed-ssl/server.crt\n"
"                                   -p quarkus.http.ssl.certificate.key-file=/etc/ssl/my-self-signed-ssl/server.key \n"
"                                   --resource secret:my-self-signed-ssl@/etc/ssl/my-self-signed-ssl˶\n"
"                                   -t container.port=8443 --dev\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:87
#, fuzzy, no-wrap
msgid "We are leveraging the **Quarkus** properties to declare where the application is expecting to find the certificate and the key (via `--p` flag). We are also telling the `Integration` to create the files expected in the __my-self-signed-ssl__ `Secret` and to mount at __/etc/ssl/my-self-signed-ssl/__ directory.\n"
msgstr "Quarkus**のプロパティを利用して、アプリケーションがどこで証明書と鍵を見つけるかを宣言しています(`--p` フラグを使用)。また、__my-self-signed-ssl__の`Secret`に期待されるファイルを作成し、__/etc/ssl/my-self-signed-ssl/__ディレクトリにマウントするように`Integration`に指示しています。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:89
#, fuzzy, no-wrap
msgid "You will find more details in the [runtime resource page official documentation](/camel-k/latest/configuration/runtime-resources.html).\n"
msgstr "詳細は[ランタイムリソースページ公式ドキュメント](https://camel.apache.org/camel-k/latest/configuration/runtime-resources).htmlをご覧ください。\n"

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:90
#, fuzzy, no-wrap
msgid "Warnings and limitations"
msgstr "警告と制限"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:93
#, fuzzy, no-wrap
msgid "We want to dedicate a last section to highlights certain checks that we've added. We think these will simplify your development by providing useful insight when using a feature in a wrong way:\n"
msgstr "最後のセクションでは、私たちが追加したいくつかのチェック項目を紹介したいと思います。これらのチェックは、機能を誤った方法で使用している場合に有益な洞察を提供することで、開発を簡素化できると考えています。\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:98
#, fuzzy, no-wrap
msgid "Warning if using a binary resource with a `--config`. This flag is meant to be used only for text configuration, you must use `--resource` instead.\n"
msgstr "バイナリリソースを `--config` で使用する場合の警告です。このフラグはテキストでの設定にのみ使用されることを意図していますので、代わりに `--resource` を使用する必要があります。\n"

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:98
#, fuzzy, no-wrap
msgid "Warning if a `Configmap` or a `Secret` you're trying to use is not yet available in the `Namespace`. The `Integration` will be created, but the `Kubernetes` platform won't start until the resource is available.\n"
msgstr "使用しようとしている `Configmap` や `Secret` が `Namespace` でまだ利用できない場合は警告します。統合」は作成されますが、リソースが利用可能になるまで「Kubernetes」プラットフォームは起動しません。\n"

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:98
#, fuzzy, no-wrap
msgid ""
"* File `--config` or `--resource` limited to 1 MiB. This is a limitation of `Kubernetes`. As we store the file content within the `Integration`\n"
" spec, we must ensure it won't break the related `Custom Resource` size limit.\n"
"* Destination path limitation. There are reserved paths that you won't be able to use.\n"
msgstr ""
"* ファイル `--config` または `--resource` は、1 MiB に制限されています。これは、`Kubernetes`の制限です。ファイルの内容を `Integration` 仕様内に保存するので、関連する `Custom Resource` のサイズ制限を破らないようにしなければなりません。\n"
" スペック内にファイルコンテンツを保存するので、関連する `カスタムリソース` のサイズ制限を破らないようにしなければなりません。\n"
"デスティネーションパスの制限。使用できない予約済みのパスがあります。\n"
