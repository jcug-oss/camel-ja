# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-19 15:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: preview
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:1
#, no-wrap
msgid "Learn how to include properties and resources in your Camel K integration"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:1
#, no-wrap
msgid "Camel K 1.5 - New configuration settings"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:11
#, no-wrap
msgid "Camel K version 1.5 is out. And with it, a new way of providing configuration and resources to your `Integration`. We have worked on a deep code refactoring in order to harmonize the existing configuration settings and add new ones to exploit the power of `camel-quarkus` runtime, which has become the main way to materialize an `Integration`.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:13
#, no-wrap
msgid "We added new features that will simplify your developer life. We also added new checks that will give you useful tips when using a feature in a wrong way.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:15
#, no-wrap
msgid "Through this blog you will learn about:\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "New build-time properties feature\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "Leverage Kubernetes resources (ie, `Configmap`, `Secret`) for config and resources\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "Kubernetes resources key filtering\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "Support for plain and binary files\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "Specify file destination path\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:22
#, no-wrap
msgid "New warnings and limitations\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:23
#, no-wrap
msgid "Runtime properties"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:27
#, no-wrap
msgid ""
"If you're an experienced Camel K developer, you are certainly familiar with the `--property` (abbreviated `--p`) and `--property-file` flags of the `kamel run` command. Through these flags you are instructing the runtime `Integration` to include properties configuration that will be used during the application execution. Within version 1.5 we made a slight change on how to provide a property file. We have deprecated the `--property-file` flag and favoured the new syntax `--property file:my-file.properties` (or shorter, `--p file:my-file.properties`).\n"
"Since this version we're also starting to distinguish between **runtime** properties and **build-time** properties. `--property` will be used to identify runtime properties.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:29
#, no-wrap
msgid "Learn more in the [runtime properties documentation page](/camel-k/latest/configuration/runtime-properties.html).\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:30
#, no-wrap
msgid "Build-time properties"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:33
#, no-wrap
msgid "You may have noticed that we highlighted the term **runtime** in the previous section. Since version 1.5 we're introducing a new kind of properties in order to distinguish two phases of the `Integration` lifecycle. As Camel Quarkus is gaining importance, we needed to conceive the concept of **build-time** properties, which are consumed by the Camel Quarkus build process. Within the presence of the `--build-property` flag, we can instruct our integrations to include certain build time configuration that may be required by the Camel Quarkus build process.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:35
#, no-wrap
msgid "If you have a look at [build time configuration variables expected by a Quarkus application](https://quarkus.io/guides/config#build-time-configuration), you will be able to spot certain properties that will influence the final build.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:37
#, no-wrap
msgid "A very interesting use case that will benefit from this new flag is the [configuration of a Datasource in Camel K](https://github.com/apache/camel-k/blob/main/examples/databases/PostgresDBAutoDatasource.java).\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:39
#, no-wrap
msgid "If you look at the example, you can see that you can quickly setup a **JDBC Datasource** by configuration, just providing certain build and runtime properties to your `Integration`:\n"
msgstr ""

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:39
#, no-wrap
msgid ""
"kamel run PostgresDBAutoDatasource.java --dev \n"
"                                        --build-property quarkus.datasource.camel.db-kind=postgresql \n"
"                                        -p quarkus.datasource.camel.jdbc.url=jdbc:postgresql://postgres:5432/test \n"
"                                        -p quarkus.datasource.camel.username=postgresadmin \n"
"                                        -p quarkus.datasource.camel.password=admin123 \n"
"                                        -d mvn:io.quarkus:quarkus-jdbc-postgresql:1.13.7.Final\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:48
#, no-wrap
msgid "You can learn more about this feature in the [build time properties documentation page](/camel-k/latest/configuration/build-time-properties.html)\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:49
#, no-wrap
msgid "Integration configuration"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:52
#, no-wrap
msgid "Until version 1.5, you had several way to provide a configuration file to an `Integration`. You could use the `--resource` to upload a file, `--configmap` to use a `Configmap` or `--secret` to use a `Secret`. We decided to review entirely this part and deprecate `--configmap` and `--secret` and deeply review `--resource` behavior.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:54
#, no-wrap
msgid "We realized that we need to distinguish between two different types of files that can be used by the `Integration`. One is tipically a text configuration file that should be parsed during the startup of the application to spot possible configuration properties. These files should be also made available in the classpath. We are providing these kind of files via `--config` flag.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:56
#, no-wrap
msgid "According to the `kamel run --help`, the `--config`:\n"
msgstr ""

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:56
#, no-wrap
msgid ""
"      --config stringArray             Add a runtime configuration from a Configmap, a Secret or a file (syntax: [configmap|secret|file]:name[/key], where  name represents the local file path or the configmap/secret name and key optionally represents the configmap/secret key to be filtered)\n"
"\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:61
#, no-wrap
msgid "You will be able to provide a `Configmap`, a `Secret` or a local file. The new syntax is expecting you to declare the kind of resource ( _configmap_, _secret_ or _file_) and the name or local path where it is located. You may also specify the `Configmap`/`Secret` key, helping therefore to limit the exposure of information that will be needed in your integration.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:63
#, no-wrap
msgid "The whole documentation is available on the [runtime configuration page](https://camel.apache.org/camel-k/latest/configuration/runtime-config.html). You can also refer the different examples provided in [Camel K example repository](https://github.com/apache/camel-k/tree/main/examples/user-config).\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:64
#, no-wrap
msgid "Integration resources"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:67
#, no-wrap
msgid "The use case for `--resource` is generally to provide any kind of file available to your integration runtime. Opposed to `--config`, the resource will let you upload a binary or text resource (file, `Configmap` or `Secret`) that won't be parsed by the application looking for properties. The materialized file won't be even added to the classpath (you can do that via `jvm` trait, though).\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:69
#, no-wrap
msgid "Let's look at what the `kamel run --help` tells us about `--resource`:\n"
msgstr ""

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:69
#, no-wrap
msgid "      --resource stringArray           Add a runtime resource from a Configmap, a Secret or a file (syntax: [configmap|secret|file]:name[/key][@path], where name represents the local file path or the configmap/secret name, key optionally represents the configmap/secret key to be filtered and path represents the destination path)\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:73
#, no-wrap
msgid "The syntax is similar on what we had for `--config`. There is a slight powerful addition though. Within a resource we can specify the destination path (_@path_) where we expect the file to be materialized. With this new feature, you will be able to include any file to any destination needed directly through the CLI. As an example, you can check now how easy is to [setup an SSL certificate to your HTTP connection](https://github.com/apache/camel-k/blob/main/examples/http/PlatformHttpsServer.java).\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:75
#, no-wrap
msgid "Once you have stored your certificate in a `Secret`, for instance running:\n"
msgstr ""

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:76
#, no-wrap
msgid "kubectl create secret generic my-self-signed-ssl --from-file=server.key --from-file=server.crt\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:81
#, no-wrap
msgid "Then, the rest will be to let your integration know where to materialize those files. Using the `PlatformHttp` in Camel K, the result will be executing the following command:\n"
msgstr ""

#. type: Fenced code block
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:81
#, no-wrap
msgid ""
"kamel run PlatformHttpsServer.java -p quarkus.http.ssl.certificate.file=/etc/ssl/my-self-signed-ssl/server.crt \\\n"
"                                   -p quarkus.http.ssl.certificate.key-file=/etc/ssl/my-self-signed-ssl/server.key \\ \n"
"                                   --resource secret:my-self-signed-ssl@/etc/ssl/my-self-signed-ssl \\\n"
"                                   -t container.port=8443 --dev\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:89
#, no-wrap
msgid "We are leveraging the **Quarkus** properties to declare where the application is expecting to find the certificate and the key (via `--p` flag). We are also telling the `Integration` to create the files expected in the __my-self-signed-ssl__ `Secret` and to mount at __/etc/ssl/my-self-signed-ssl/__ directory.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:91
#, no-wrap
msgid "You will find more details in the [runtime resource page official documentation](https://camel.apache.org/camel-k/latest/configuration/runtime-resources).html\n"
msgstr ""

#. type: Title ##
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:92
#, no-wrap
msgid "Warnings and limitations"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:95
#, no-wrap
msgid "We want to dedicate a last section to highlights certain checks that we've added. We think these will simplify your development by providing useful insight when using a feature in a wrong way:\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:100
#, no-wrap
msgid "Warning if using a binary resource with a `--config`. This flag is meant to be used only for text configuration, you must use `--resource` instead.\n"
msgstr ""

#. type: Bullet: '* '
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:100
#, no-wrap
msgid "Warning if a `Configmap` or a `Secret` you're trying to use is not yet available in the `Namespace`. The `Integration` will be created, but the `Kubernetes` platform won't start until the resource is available.\n"
msgstr ""

#. type: Plain text
#: upstream/content/blog/2021/07/camel-k-properties-refactoring/index.md:100
#, no-wrap
msgid ""
"* File `--config` or `--resource` limited to 1 MiB. This is a limitation of `Kubernetes`. As we store the file content within the `Integration`\n"
" spec, we must ensure it won't break the related `Custom Resource` size limit.\n"
"* Destination path limitation. There are reserved paths that you won't be able to use.\n"
msgstr ""
