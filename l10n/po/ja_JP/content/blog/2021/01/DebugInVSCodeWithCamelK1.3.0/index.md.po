# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-05-18 09:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:1
#, fuzzy, no-wrap
msgid "How to Java debug a Camel K integration in VS Code with Camel K 1.3.0"
msgstr "Camel K 1.3.0を使ってVS CodeでCamel Kの統合をJavaでデバッグする方法"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:10
#, fuzzy, no-wrap
msgid "UPDATED ON 17 May 2021: More recent related content available in [this blogpost](/blog/2021/05/JavaDebuggingInVSCode-iteration2).\n"
msgstr "2021年5月17日に更新しました。このブログポスト](/blog/2021/05/JavaDebuggingInVSCode-iteration2)に、より最近の関連コンテンツがあります。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:12
#, fuzzy, no-wrap
msgid "Camel K 1.3.0 is providing a new feature to Java debug deployed integrations. Even if Camel K 1.3.0 is [not fully compatible](https://github.com/apache/camel-k/issues/1872) with VS Code Tooling for Apache Camel K extension, it remains possible to leverage the VS Code Java debugging capabilities.\n"
msgstr "Camel K 1.3.0では、デプロイされた統合機能をJavaでデバッグするための新しい機能が提供されています。Camel K 1.3.0は、VS Code Tooling for Apache Camel K extensionと完全な互換性がない(https://github.com/apache/camel-k/issues/1872)にもかかわらず、VS CodeのJavaデバッグ機能を利用することができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:14
#, fuzzy, no-wrap
msgid "I recorded a [video](https://youtu.be/cFPuxd1Je3c) which is following the steps in this blogpost. I let you choose your preferred way to discover how to java debug your Camel K integration in VS Code.\n"
msgstr "このブログポストの手順に沿って、[ビデオ](https://youtu.be/cFPuxd1Je3c)を録画しました。VS CodeでCamel Kの統合をjavaでデバッグする方法を紹介していますので、お好きな方法をお選びください。\n"

#. type: Title #
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:15
#, fuzzy, no-wrap
msgid "Requirements"
msgstr "要求事項"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:21
#, fuzzy, no-wrap
msgid "[VS Code Extension Pack for Apache Camel](https://marketplace.visualstudio.com/items?itemName=redhat.apache-camel-extension-pack)\n"
msgstr "VS Code Extension Pack for Apache Camel](https://marketplace.visualstudio.com/items?itemName=redhat.apache-camel-extension-pack)\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:21
#, fuzzy, no-wrap
msgid "Uncheck _Camelk -> Integrations: Auto-upgrade_ in _File -> Preferences -> Settings -> Extensions -> Apache Camel K Tooling_\n"
msgstr "_amelk -&gt; Integrations のチェックを外します。ファイル」→「環境設定」→「設定」→「拡張機能」→「Apache Camel K Tooling」の「Auto-upgrade」にチェックを入れる。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:21
#, fuzzy, no-wrap
msgid "[Camel K 1.3.0 binary](/download/#camel-k) available on command-line\n"
msgstr "Camel K 1.3.0 バイナリ](/download/#camel-k) をコマンドラインで利用可能\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:21
#, fuzzy, no-wrap
msgid "Camel K deployed to a cluster. In this demo, we will use a Camel K instance deployed on minikube.\n"
msgstr "クラスタにデプロイされたCamel K。このデモでは、minikubeにデプロイされたCamel Kのインスタンスを使用します。\n"

#. type: Title #
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:22
#, fuzzy, no-wrap
msgid "How to java debug"
msgstr "javaのデバッグ方法"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:24
#, fuzzy, no-wrap
msgid "Create an Integration written in Java"
msgstr "Javaで書かれたインテグレーションの作成"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:31
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:60
#, fuzzy, no-wrap
msgid "Open command palette _View -> Command Palette..._\n"
msgstr "コマンドパレットを開く _View -&gt; Command Palette... _\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:31
#, fuzzy, no-wrap
msgid "Select _Create a new Apache Camel K integration_\n"
msgstr "_Create new Apache Camel K integration_ を選択します。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:31
#, fuzzy, no-wrap
msgid "Select _Java_\n"
msgstr "Select _Java_\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:31
#, fuzzy, no-wrap
msgid "Select the folder\n"
msgstr "フォルダの選択\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:31
#, fuzzy, no-wrap
msgid "Provide a name, for instance: _Demo_\n"
msgstr "名前を付けて、例えば_Demo_\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:33
#, fuzzy, no-wrap
msgid "![Create java file](./1-CreateJavaCamelKIntegration.gif)\n"
msgstr "![javaファイルの作成](./1-CreateJavaCamelKIntegration.gif)\n"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:34
#, fuzzy, no-wrap
msgid "Set a breakpoint"
msgstr "ブレークポイントの設定"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:37
#, fuzzy, no-wrap
msgid "To have a breakpoint during the execution of the Camel Route, as opposite at the creation of the Camel Route, you need to add a small piece of code. This is a classical trick for Java debugging of Camel Routes, not specific to Camel K.\n"
msgstr "Camel Routeの実行中にブレークポイントを設定するには、Camel Routeの作成時とは逆に、小さなコードを追加する必要があります。これは、Camel Kに限ったことではなく、Camel RouteをJavaでデバッグする際の古典的な手法です。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:39
#, fuzzy, no-wrap
msgid "The trick consists of adding a Processor between the steps you want to observe. It will be something like:\n"
msgstr "そのコツは、観察したいステップの間にProcessorを追加することです。それは次のようなものです。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:46
#, fuzzy, no-wrap
msgid ""
"\t\t  .process(new Processor(){\n"
"\t\t\t  @Override\n"
"\t\t\t  public void process(Exchange exchange) throws Exception {\n"
"\t\t\t\t  System.out.println(\"can be breakpoint on this line\");\n"
"\t\t\t  }\n"
"\t\t  })\n"
msgstr ""
"\t\t  .process(new Processor(){)\n"
"\t\t\t  オーバーライド\n"
"\t\t\t  public void process(Exchange exchange) throws Exception {.\n"
"\t\t\t\t  System.out.println(\"can be breakpoint on this line\")を実行します。\n"
"\t\t\t  }\n"
"\t\t  })\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:48
#, fuzzy, no-wrap
msgid "Then, you can add a breakpoint to the line by clicking in the left ruler. A red dot will appear.\n"
msgstr "次に、左のルーラーでクリックして、その線にブレークポイントを追加します。赤い点が表示されます。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:50
#, fuzzy, no-wrap
msgid "![Provide breakpoint inside a Processor](./2-putBreakpoint.gif)\n"
msgstr "![プロセッサ内にブレークポイントを設ける](./2-putBreakpoint.gif)\n"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:51
#, fuzzy, no-wrap
msgid "Start integration"
msgstr "統合開始"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:54
#, fuzzy, no-wrap
msgid "You can then start the integration:\n"
msgstr "その後、統合を開始することができます。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:60
#, fuzzy, no-wrap
msgid "Ensure the editor is still opened on the Java Integration file\n"
msgstr "Java統合ファイルでエディタが開かれていることを確認する\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:60
#, fuzzy, no-wrap
msgid "Select _Start Apache Camel K Integration_\n"
msgstr "Start Apache Camel K Integration_を選択します。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:60
#, fuzzy, no-wrap
msgid "Select _Basic_\n"
msgstr "Basic_を選択\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:60
#, fuzzy, no-wrap
msgid "Check in the _Apache Camel K Integrations_ view that the example is deployed successfully. it will have a green dot. It can take few minutes for the first deployment.\n"
msgstr "Apache Camel K Integrations_ビューで、サンプルが正常にデプロイされたことを確認してください。緑色のドットが表示されます。最初のデプロイメントには数分かかることがあります。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:62
#, fuzzy, no-wrap
msgid "![Start integration in basic mode](./3-startIntegration.gif)\n"
msgstr "![基本モードで統合を開始](./3-startIntegration.gif)\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:64
#, fuzzy, no-wrap
msgid "Note: If starting in --dev, it will allow to automatically reload the Integration. But take care, debugger will need to be restarted on each change. Meaning that the next two steps will need to be repeated.\n"
msgstr "注： --devで起動すると、自動的にインテグレーションをリロードすることができます。ただし、変更のたびにデバッガーを再起動する必要があるので注意してください。つまり、次の2つのステップを繰り返す必要があります。\n"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:65
#, fuzzy, no-wrap
msgid "Start debugger on runtime"
msgstr "ランタイムにデバッガを起動"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:69
#, fuzzy, no-wrap
msgid "Open terminal: _terminal -> New Terminal_\n"
msgstr "ターミナルを開くターミナル」→「新規ターミナル」。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:69
#, fuzzy, no-wrap
msgid "Call _kamel debug demo_ (replace _demo_ by the integration name that appears in _Apache Camel K Integrations_ view if you choose a different name.\n"
msgstr "kamel debug demo_を呼び出す（_demo_は、異なる名前を選択した場合は、_Apache Camel K Integrations_ビューに表示される統合名に置き換えてください）。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:71
#, fuzzy, no-wrap
msgid "![Start debugger on runtime](4-startDebuggerOnRuntime.gif)\n"
msgstr "![ランタイムにデバッガを開始](4-startDebuggerOnRuntime.gif)\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:73
#, fuzzy, no-wrap
msgid "Note: Take care to use the kamel 1.3.0 binaries.\n"
msgstr "注：kamel 1.3.0のバイナリを使用するように注意してください。\n"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:74
#, fuzzy, no-wrap
msgid "Attach debugger"
msgstr "デバッガの装着"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "In the left panel, select the _Run & Debug_ container\n"
msgstr "左側のパネルで、_Run &amp; Debug_コンテナを選択します。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Click on _create a launch.json_\n"
msgstr "create a launch.json_をクリックします。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Remove the default _configuration_\n"
msgstr "デフォルトの _configuration_ を削除する\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Use completion to pick the _Java: Attach_\n"
msgstr "補完機能を使って、_Java:アタッチメント\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Provide a meaningful name\n"
msgstr "意味のある名前をつける\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Update port, by default Camel K is using _5005_\n"
msgstr "ポートの更新、デフォルトではCamel Kは_5005_を使用しています。\n"

#. type: Bullet: '- '
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:83
#, fuzzy, no-wrap
msgid "Click on the green triangle to _Start debugging_\n"
msgstr "緑の三角マークをクリックすると、_Start debugging_になります。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:85
#, fuzzy, no-wrap
msgid "![Attach debugger](5-AttachDebugger.gif)\n"
msgstr "![デバッガーを取り付ける](5-AttachDebugger.gif)\n"

#. type: Title ####
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:86
#, fuzzy, no-wrap
msgid "Enjoy"
msgstr "エンジョイ"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:89
#, fuzzy, no-wrap
msgid "Now, it is time to enjoy. You can notice that you have access to the message content. It is providing a good insight into what is going on in the Camel Route.\n"
msgstr "さて、いよいよお楽しみの時間がやってきました。メッセージコンテンツにアクセスしていることに気づくことができます。Camel Routeで何が起こっているのかを知ることができます。\n"

#. type: Title #
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:90
#, fuzzy, no-wrap
msgid "What's next?"
msgstr "次は何ですか？"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:93
#, fuzzy, no-wrap
msgid "There is room for improvements, provide your feedback and ideas!\n"
msgstr "改良の余地がありますので、ご意見やアイデアをお寄せください。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:95
#, fuzzy, no-wrap
msgid "You can start discussions on [Zulip camel-tooling channel](https://camel.zulipchat.com/#narrow/stream/258729-camel-tooling).\n"
msgstr "Zulip camel-tooling channel](https://camel.zulipchat.com/#narrow/stream/258729-camel-tooling)で議論を始めることができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:97
#, fuzzy, no-wrap
msgid "You can create and vote for issues on GitHub [VS Code Tooling support for Apache Camel K](https://github.com/camel-tooling/vscode-camelk/issues) repository.\n"
msgstr "GitHub [VS Code Tooling support for Apache Camel K](https://github.com/camel-tooling/vscode-camelk/issues)のリポジトリで課題の作成と投票ができます。\n"

#. type: Plain text
#: upstream/content/blog/2021/01/DebugInVSCodeWithCamelK1.3.0/index.md:98
#, fuzzy, no-wrap
msgid "You can create and vote for issues on the [related epic in Jira](https://issues.redhat.com/browse/FUSETOOLS2-941) which is used by the Red Hat Integration tooling team.\n"
msgstr "Red Hat Integration tooling teamが使用している[related epic in Jira](https://issues.redhat.com/browse/FUSETOOLS2-941)では、課題の作成や投票を行うことができます。\n"
